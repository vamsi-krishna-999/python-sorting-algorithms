Heap Sort:
Definition: Heap Sort is a comparison-based sorting algorithm that builds 
a binary heap from the input list and repeatedly extracts the maximum 
(for max heap) or minimum (for min heap) element from the heap, 
resulting in a sorted list.

Procedure:

Build a max heap (or min heap) from the input list.
Swap the root (maximum or minimum element) with the last element of the heap.
Reduce the heap size by one.
Restore the heap property (heapify) from the root element.
Repeat steps 2-4 until the heap is empty.
Important Points:

Heap Sort has a time complexity of O(n log n),
making it efficient for large datasets.

It is not a stable sorting algorithm.

Unlike other sorting algorithms, Heap Sort does not require the entire dataset 
to be present in memory, making it suitable for external sorting.


Source Code with Explanation:


def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2

    if l < n and arr[l] > arr[largest]:
        largest = l

    if r < n and arr[r] > arr[largest]:
        largest = r

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)

    # Build a max heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Extract elements from the heap one by one
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Swap root with last element
        heapify(arr, i, 0)

    return arr

# Example usage:
if __name__ == "__main__":
    arr = [12, 11, 13, 5, 6, 7]
    print("Original array:", arr)
    sorted_arr = heap_sort(arr)
    print("Sorted array:", sorted_arr)




