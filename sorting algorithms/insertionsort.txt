1. Definition:
===================

Insertion Sort is a simple sorting algorithm that builds the final sorted array 
(or list) one item at a time. It takes each element from the input list and 
inserts it into its correct position within the sorted portion of the list.

2. Procedure:
====================

Start with the second element (index 1) of the list.
Compare this element with the elements before it in the 
sorted sub-list.

Shift the larger elements one position to the right to 
make space for the new element.

Insert the element into the correct position in the sorted sub-list.
Repeat the process for each element in the list until the entire list is sorted.


3. Important Points in the Algorithm:
-==========================================

Insertion sort is an in-place sorting algorithm, meaning it sorts 
the list without requiring additional memory space.

It is stable, which means it preserves the relative order of equal
 elements in the sorted list.

Insertion sort performs well on small lists or nearly sorted lists, 
but its time complexity is O(n^2) in the worst-case scenario.


4. Source Code with Explanation:
========================================


def insertion_sort(arr):
    """
    Sorts a list using the Insertion Sort algorithm.

    Parameters:
        arr (list): The list to be sorted.

    Returns:
        list: The sorted list.
    """
    for i in range(1, len(arr)):
        key = arr[i]  # Current element to be inserted
        j = i - 1     # Index of the last element in the sorted sub-list

        # Move elements of arr[0..i-1], that are greater than key,
        # to one position ahead of their current position
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

    return arr

# Example usage:
if __name__ == "__main__":
    arr = [12, 11, 13, 5, 6]
    print("Original array:", arr)
    sorted_arr = insertion_sort(arr)
    print("Sorted array:", sorted_arr)
5. Example:
Consider the input list [12, 11, 13, 5, 6]:

Pass 1: [11, 12, 13, 5, 6] (11 is moved before 12)
Pass 2: [11, 12, 13, 5, 6] (No change)
Pass 3: [11, 12, 13, 5, 6] (No change)
Pass 4: [5, 11, 12, 13, 6] (5 is moved before 11, and then before 12)
Pass 5: [5, 6, 11, 12, 13] (6 is moved before 11)
Thus, the sorted list is [5, 6, 11, 12, 13].

This example demonstrates how Insertion Sort iteratively builds 
the sorted list by inserting each element into its correct 
position within the sorted sub-list.





